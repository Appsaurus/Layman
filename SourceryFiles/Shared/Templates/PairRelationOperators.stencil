{% for AnchorPairType in argument.AnchorPairTypes %}
{% set Solution %}{{AnchorPairType}}.Solution{% endset %}
{% set constraintMethod %}{% if anchortype == 'LayoutDimension' %}constraints{% else %}constraintsInvertedAsInsets{% endif %}{% endset %}
// sourcery:file:PairRelationOperators/{{AnchorPairType}}+RelationOperators
//
//  {{AnchorType}}+RelationOperators.swift
//  UILayoutKit
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

// NOTE: Paired edge constraints are inverted as insets because it is more common and easier
// to reason about layouts in terms of insets from edges rather than shifted value offsets.

// MARK: Equal
// MARK: Anchors == Expression
@discardableResult
public func {{argument.EqualityOperator}} (lhs: {{AnchorPairType}}, rhs: {{AnchorPairType}}Expression) -> {{Solution}} {
    return lhs.equal(to: rhs)
}

// MARK: Anchors == Anchors
@discardableResult
public func {{argument.EqualityOperator}} (lhs: {{AnchorPairType}}, rhs: {{AnchorPairType}}) -> {{Solution}} {
    return lhs.equal(to: rhs)
}

// MARK: LessThanOrEqual
// MARK: Anchors <= Expression
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: {{AnchorPairType}}, rhs: {{AnchorPairType}}Expression) -> {{Solution}} {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: Anchors <= Anchors
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: {{AnchorPairType}}, rhs: {{AnchorPairType}}) -> {{Solution}} {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: GreaterThanOrEqual
// MARK: Anchors >= Expression
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: {{AnchorPairType}}, rhs: {{AnchorPairType}}Expression) -> {{Solution}} {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: Anchors >= Anchors
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: {{AnchorPairType}}, rhs: {{AnchorPairType}}) -> {{Solution}} {
    return lhs.greaterThanOrEqual(to: rhs)
}
// sourcery:end
{% endfor %}
