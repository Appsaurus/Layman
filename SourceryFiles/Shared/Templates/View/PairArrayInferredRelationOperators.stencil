{% set equal argument.operators.equal %}
{% set lessThanOrEqual argument.operators.lessThanOrEqual %}
{% set greaterThanOrEqual argument.operators.greaterThanOrEqual %}
{% set addition argument.arithmeticOperators.addition %}
{% set subtraction argument.arithmeticOperators.subtraction %}
{% set multiplication argument.arithmeticOperators.multiplication %}
{% set division argument.arithmeticOperators.division %}

{% for AnchorPairType in argument.AnchorPairTypes %}
{% set Solution %}{{AnchorPairType}}.Solution{% endset %}
// sourcery:file:View/Operators/ViewArray+{{AnchorPairType}}RelationOperators
//
//  ViewArray+{{AnchorPairType}}RelationOperators.swift
//  UILayoutKit
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

// MARK: [View] == Anchor
@discardableResult
public func {{equal}} (lhs: [View], rhs: {{AnchorPairType}}) -> [{{Solution}}] {
    return lhs.map { $0 {{equal}} rhs }
}

// MARK: [View] == Anchors
@discardableResult
public func {{equal}} (lhs: [View], rhs: {{AnchorPairType}}s) -> [[{{Solution}}]] {
    return lhs.map { element in
        rhs.map({element {{equal}} $0})
    }
}

// MARK: [View] == Expression
@discardableResult
public func {{equal}} (lhs: [View], rhs: {{AnchorPairType}}Expression) -> [{{Solution}}] {
    return lhs.map { $0 {{equal}} rhs }
}

// MARK: [View] == Expressions
@discardableResult
public func {{equal}} (lhs: [View], rhs: {{AnchorPairType}}Expressions) -> [[{{Solution}}]] {
    return lhs.map { element in
        rhs.map({element {{equal}} $0})
    }
}

// MARK: - LessThanOrEqual

// MARK: [View] <= Anchor
@discardableResult
public func {{lessThanOrEqual}} (lhs: [View], rhs: {{AnchorPairType}}) -> [{{Solution}}] {
    return lhs.map { $0 {{lessThanOrEqual}} rhs }
}

// MARK: [View] <= Anchors
@discardableResult
public func {{lessThanOrEqual}} (lhs: [View], rhs: {{AnchorPairType}}s) -> [[{{Solution}}]] {
    return lhs.map { element in
        rhs.map({element {{lessThanOrEqual}} $0})
    }
}

// MARK: [View] <= Expression
@discardableResult
public func {{lessThanOrEqual}} (lhs: [View], rhs: {{AnchorPairType}}Expression) -> [{{Solution}}] {
    return lhs.map { $0 {{lessThanOrEqual}} rhs }
}

// MARK: [View] <= Expressions
@discardableResult
public func {{lessThanOrEqual}} (lhs: [View], rhs: {{AnchorPairType}}Expressions) -> [[{{Solution}}]] {
    return lhs.map { element in
        rhs.map({element {{lessThanOrEqual}} $0})
    }
}

// MARK: - GreaterThanOrEqual

// MARK: [View] >= Anchor
@discardableResult
public func {{greaterThanOrEqual}} (lhs: [View], rhs: {{AnchorPairType}}) -> [{{Solution}}] {
    return lhs.map { $0 {{greaterThanOrEqual}} rhs }
}

// MARK: [View] >= Anchors
@discardableResult
public func {{greaterThanOrEqual}} (lhs: [View], rhs: {{AnchorPairType}}s) -> [[{{Solution}}]] {
    return lhs.map { element in
        rhs.map({element {{greaterThanOrEqual}} $0})
    }
}

// MARK: [View] >= Expression
@discardableResult
public func {{greaterThanOrEqual}} (lhs: [View], rhs: {{AnchorPairType}}Expression) -> [{{Solution}}] {
    return lhs.map { $0 {{greaterThanOrEqual}} rhs }
}

// MARK: [View] >= Expressions
@discardableResult
public func {{greaterThanOrEqual}} (lhs: [View], rhs: {{AnchorPairType}}Expressions) -> [[{{Solution}}]] {
    return lhs.map { element in
        rhs.map({element {{greaterThanOrEqual}} $0})
    }
}
// sourcery:end
{% endfor %}



