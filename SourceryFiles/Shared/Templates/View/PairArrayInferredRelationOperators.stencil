
{% for AnchorPairType in argument.AnchorPairTypes %}
// sourcery:file:View/Operators/ViewArray+{{AnchorPairType}}RelationOperators
//
//  ViewArray+{{AnchorPairType}}RelationOperators.swift
//  UILayoutKit
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

// MARK: [View] == Anchor
@discardableResult
public func {{argument.EqualityOperator}} (lhs: [View], rhs: {{AnchorPairType}}) -> [ConstraintPair] {
    return lhs.map { $0 {{argument.EqualityOperator}} rhs }
}

// MARK: [View] == Anchors
@discardableResult
public func {{argument.EqualityOperator}} (lhs: [View], rhs: {{AnchorPairType}}s) -> [[ConstraintPair]] {
    return lhs.map { element in
        rhs.map({element {{argument.EqualityOperator}} $0})
    }
}

// MARK: [View] == Expression
@discardableResult
public func {{argument.EqualityOperator}} (lhs: [View], rhs: {{AnchorPairType}}Expression) -> [ConstraintPair] {
    return lhs.map { $0 {{argument.EqualityOperator}} rhs }
}

// MARK: [View] == Expressions
@discardableResult
public func {{argument.EqualityOperator}} (lhs: [View], rhs: {{AnchorPairType}}Expressions) -> [[ConstraintPair]] {
    return lhs.map { element in
        rhs.map({element {{argument.EqualityOperator}} $0})
    }
}

// MARK: - LessThanOrEqual

// MARK: [View] <= Anchor
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorPairType}}) -> [ConstraintPair] {
    return lhs.map { $0 {{argument.LessThanOrEqualToOperator}} rhs }
}

// MARK: [View] <= Anchors
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorPairType}}s) -> [[ConstraintPair]] {
    return lhs.map { element in
        rhs.map({element {{argument.LessThanOrEqualToOperator}} $0})
    }
}

// MARK: [View] <= Expression
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorPairType}}Expression) -> [ConstraintPair] {
    return lhs.map { $0 {{argument.LessThanOrEqualToOperator}} rhs }
}

// MARK: [View] <= Expressions
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorPairType}}Expressions) -> [[ConstraintPair]] {
    return lhs.map { element in
        rhs.map({element {{argument.LessThanOrEqualToOperator}} $0})
    }
}

// MARK: - GreaterThanOrEqual

// MARK: [View] >= Anchor
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorPairType}}) -> [ConstraintPair] {
    return lhs.map { $0 {{argument.GreaterThanOrEqualToOperator}} rhs }
}

// MARK: [View] >= Anchors
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorPairType}}s) -> [[ConstraintPair]] {
    return lhs.map { element in
        rhs.map({element {{argument.GreaterThanOrEqualToOperator}} $0})
    }
}

// MARK: [View] >= Expression
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorPairType}}Expression) -> [ConstraintPair] {
    return lhs.map { $0 {{argument.GreaterThanOrEqualToOperator}} rhs }
}

// MARK: [View] >= Expressions
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorPairType}}Expressions) -> [[ConstraintPair]] {
    return lhs.map { element in
        rhs.map({element {{argument.GreaterThanOrEqualToOperator}} $0})
    }
}
// sourcery:end
{% endfor %}



