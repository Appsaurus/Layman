
{% for AnchorType in argument.AnchorTypes %}
{% set Solution %}{{AnchorType}}.Solution{% endset %}
// sourcery:file:View/Operators/ViewArray+{{AnchorType}}RelationOperators
//
//  ViewArray+{{AnchorType}}RelationOperators.swift
//  UILayoutKit
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//
// MARK: [View] == Anchor
@discardableResult
public func {{argument.EqualityOperator}} (lhs: [View], rhs: {{AnchorType}}) -> [{{Solution}}] {
    return lhs.map { $0 {{argument.EqualityOperator}} rhs }
}

// MARK: [View] == Anchors
@discardableResult
public func {{argument.EqualityOperator}} (lhs: [View], rhs: {{AnchorType}}s) -> [[{{Solution}}]] {
    return lhs.map { element in
        rhs.map({element {{argument.EqualityOperator}} $0})
    }
}

// MARK: [View] == Expression
@discardableResult
public func {{argument.EqualityOperator}} (lhs: [View], rhs: {{AnchorType}}Expression) -> [{{Solution}}] {
    return lhs.map { $0 {{argument.EqualityOperator}} rhs }
}

// MARK: [View] == Expressions
@discardableResult
public func {{argument.EqualityOperator}} (lhs: [View], rhs: {{AnchorType}}Expressions) -> [[{{Solution}}]] {
    return lhs.map { $0 {{argument.EqualityOperator}} rhs }
}

// MARK: - LessThanOrEqual

// MARK: [View] <= Anchor
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorType}}) -> [{{Solution}}] {
    return lhs.map { $0 {{argument.LessThanOrEqualToOperator}} rhs }
}

// MARK: [View] <= Anchors
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorType}}s) -> [[{{Solution}}]] {
    return lhs.map { $0 {{argument.LessThanOrEqualToOperator}} rhs }
}

// MARK: [View] <= Expression
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorType}}Expression) -> [{{Solution}}] {
    return lhs.map { $0 {{argument.LessThanOrEqualToOperator}} rhs }
}

// MARK: [View] <= Expressions
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorType}}Expressions) -> [[{{Solution}}]] {
    return lhs.map { $0 {{argument.LessThanOrEqualToOperator}} rhs }
}

// MARK: - GreaterThanOrEqual

// MARK: [View] >= Anchor
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorType}}) -> [{{Solution}}] {
    return lhs.map { $0 {{argument.GreaterThanOrEqualToOperator}} rhs }
}

// MARK: [View] >= Anchors
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorType}}s) -> [[{{Solution}}]] {
    return lhs.map { $0 {{argument.GreaterThanOrEqualToOperator}} rhs }
}

// MARK: [View] >= Expression
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorType}}Expression) -> [{{Solution}}] {
    return lhs.map { $0 {{argument.GreaterThanOrEqualToOperator}} rhs }
}

// MARK: [View] >= Expressions
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: [View], rhs: {{AnchorType}}Expressions) -> [[{{Solution}}]] {
    return lhs.map { $0 {{argument.GreaterThanOrEqualToOperator}} rhs }
}
// sourcery:end
{% endfor %}



