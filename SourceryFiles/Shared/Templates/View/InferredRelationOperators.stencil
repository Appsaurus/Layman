
{% for AnchorType in argument.AnchorTypes %}
{% set Solution %}{{AnchorType}}.Solution{% endset %}
// sourcery:file:View/Operators/View+{{AnchorType}}RelationOperators
//
//  View+{{AnchorType}}RelationOperators.swift
//  UILayoutKit
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

// MARK: - Equal

// MARK: View == Anchor
@discardableResult
public func {{argument.EqualityOperator}} (lhs: View, rhs: {{AnchorType}}) -> {{Solution}} {
    return lhs[keyPath: ...rhs].equal(to: rhs)
}
// MARK: View == Expression
@discardableResult
public func {{argument.EqualityOperator}} (lhs: View, rhs: {{AnchorType}}Expression) -> {{Solution}} {
    return lhs[keyPath: ...rhs].equal(to: rhs)
}

// MARK: - LessThanOrEqual

// MARK: View <= Anchor
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}) -> {{Solution}} {
    return lhs[keyPath: ...rhs].lessThanOrEqual(to: rhs)
}
// MARK: View <= Expression
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}Expression) -> {{Solution}} {
    return lhs[keyPath: ...rhs].lessThanOrEqual(to: rhs)
}

// MARK: - GreaterThanOrEqual

// MARK: View >= Anchor
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}) -> {{Solution}} {
    return lhs[keyPath: ...rhs].greaterThanOrEqual(to: rhs)
}
// MARK: View >= Expression
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}Expression) -> {{Solution}} {
    return lhs[keyPath: ...rhs].greaterThanOrEqual(to: rhs)
}

// MARK: - rhs collection -

// MARK: - Equal

// MARK: View == Anchors
@discardableResult
public func {{argument.EqualityOperator}} (lhs: View, rhs: {{AnchorType}}s) -> [{{Solution}}] {
    return rhs.map({lhs {{argument.EqualityOperator}} $0})
}

// MARK: View == Expressions
@discardableResult
public func {{argument.EqualityOperator}} (lhs: View, rhs: {{AnchorType}}Expressions) -> [{{Solution}}] {
    return rhs.map({lhs {{argument.EqualityOperator}} $0})
}

// MARK: - LessThanOrEqual

// MARK: View <= Anchors
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}s) -> [{{Solution}}] {
    return rhs.map({lhs {{argument.LessThanOrEqualToOperator}} $0})
}
// MARK: View <= Expressions
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}Expressions) -> [{{Solution}}] {
    return rhs.map({lhs {{argument.LessThanOrEqualToOperator}} $0})
}

// MARK: - GreaterThanOrEqual

// MARK: View >= Anchors
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}s) -> [{{Solution}}] {
    return rhs.map({lhs {{argument.GreaterThanOrEqualToOperator}} $0})
}
// MARK: View >= Expressions
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}Expressions) -> [{{Solution}}] {
    return rhs.map({lhs {{argument.GreaterThanOrEqualToOperator}} $0})
}
// sourcery:end
{% endfor %}


