
{% for AnchorType in argument.AnchorTypes %}
// sourcery:file:InferredRelationOperators/{{AnchorType}}+InferredRelationOperators
//
//  {{AnchorType}}+InferredRelationOperators.swift
//  UILayoutKit
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

// MARK: - Equal

// MARK: View == Anchor
@discardableResult
public func {{argument.EqualityOperator}} (lhs: View, rhs: {{AnchorType}}) -> Constraint {
    return lhs[keyPath: ...rhs] {{argument.EqualityOperator}} rhs
}
// MARK: View == Expression
@discardableResult
public func {{argument.EqualityOperator}} (lhs: View, rhs: {{AnchorType}}Expression) -> Constraint {
    return lhs[keyPath: ...rhs.anchor] {{argument.EqualityOperator}} rhs
}

// MARK: - LessThanOrEqual

// MARK: View <= Anchor
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}) -> Constraint {
    return lhs[keyPath: ...rhs] {{argument.LessThanOrEqualToOperator}} rhs
}
// MARK: View <= Expression
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}Expression) -> Constraint {
    return lhs[keyPath: ...rhs.anchor] {{argument.LessThanOrEqualToOperator}} rhs
}

// MARK: - GreaterThanOrEqual

// MARK: View >= Anchor
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}) -> Constraint {
    return lhs[keyPath: ...rhs] {{argument.GreaterThanOrEqualToOperator}} rhs
}
// MARK: View >= Expression
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}Expression) -> Constraint {
    return lhs[keyPath: ...rhs.anchor] {{argument.GreaterThanOrEqualToOperator}} rhs
}

// MARK: - rhs collection -

// MARK: - Equal

// MARK: View == Anchors
@discardableResult
public func {{argument.EqualityOperator}} (lhs: View, rhs: {{AnchorType}}s) -> Constraints {
    return rhs.map({lhs {{argument.EqualityOperator}} $0})
}

// MARK: View == Expressions
@discardableResult
public func {{argument.EqualityOperator}} (lhs: View, rhs: {{AnchorType}}Expressions) -> Constraints {
    return rhs.map({lhs {{argument.EqualityOperator}} $0})
}

// MARK: - LessThanOrEqual

// MARK: View <= Anchors
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}s) -> Constraints {
    return rhs.map({lhs {{argument.LessThanOrEqualToOperator}} $0})
}
// MARK: View <= Expressions
@discardableResult
public func {{argument.LessThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}Expressions) -> Constraints {
    return rhs.map({lhs {{argument.LessThanOrEqualToOperator}} $0})
}

// MARK: - GreaterThanOrEqual

// MARK: View >= Anchors
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}s) -> Constraints {
    return rhs.map({lhs {{argument.GreaterThanOrEqualToOperator}} $0})
}
// MARK: View >= Expressions
@discardableResult
public func {{argument.GreaterThanOrEqualToOperator}} (lhs: View, rhs: {{AnchorType}}Expressions) -> Constraints {
    return rhs.map({lhs {{argument.GreaterThanOrEqualToOperator}} $0})
}
// sourcery:end
{% endfor %}


