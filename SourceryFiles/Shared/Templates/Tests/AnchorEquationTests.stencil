{% set constant 10 %}
{% set multiplier 3 %}
{% set divisor 2 %}
{% for type in types.all|annotated:"anchorEquationTest" %}
// sourcery:inline:auto:{{type.name}}.EquationTests
{% set lhsItem type.annotations.lhsItem %}
{% for lhsAttribute in type.annotations.lhsAttributes %}
{% for rhsAttribute in type.annotations.rhsAttributes %}
// MARK: {{lhsItem}}{{lhsAttribute|upperFirstLetter}} <=> relatedView{{rhsAttribute|upperFirstLetter}}
{% for operatorName in argument.operators %}
{% set operator %}{{argument.operators[operatorName]}}{% endset %}
{% set baseFunctionName %}test{{lhsItem|upperFirstLetter}}{{lhsAttribute|upperFirstLetter}}{{operatorName|upperFirstLetter}}To{{rhsAttribute|upperFirstLetter}}{% endset %}
{% set baseLhs %}{{lhsItem}}.{{lhsAttribute}}Anchor{% endset %}
{% set baseRhs %}relatedView.{{rhsAttribute}}{% endset %}
{% set baseEquation %}{{baseLhs}} {{operator}} {{baseRhs}}{% endset %}
{% set baseAssertion %}{{lhsItem}}, .{{lhsAttribute}}, .{{operatorName}}, relatedView, .{{rhsAttribute}}{% endset %}
    // MARK: {{operatorName|upperFirstLetter}}

    func {{baseFunctionName}}() {
        let constraints = {{baseEquation}}
        constraints.assert({{baseAssertion}})
    }

    // MARK: {{operatorName|upperFirstLetter}} with constant
    func {{baseFunctionName}}PlusConstant() {
        let constraints = {{baseEquation}} + {{constant}}
        constraints.assert({{baseAssertion}}, constant: {{constant}})
    }

    func {{baseFunctionName}}MinusConstant() {
        let constraints = {{baseEquation}} - {{constant}}
        constraints.assert({{baseAssertion}}, constant: -{{constant}})
    }

    // MARK: {{operatorName|upperFirstLetter}} with multiplier
    func {{baseFunctionName}}MultiplyingConstant() {
        let constraints = {{baseEquation}} * {{multiplier}}
        constraints.assert({{baseAssertion}}, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}MultipliedByConstant() {
        let constraints = {{baseLhs}} {{operator}} {{multiplier}} * {{baseRhs}}
        constraints.assert({{baseAssertion}}, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}DividedByConstant() {
        let constraints = {{baseEquation}} / {{divisor}}
        constraints.assert({{baseAssertion}}, multiplier: 1 / {{divisor}})
    }

    // MARK: {{operatorName|upperFirstLetter}} Prioritized
    func {{baseFunctionName}}WithPriority() {
        let constraints = {{baseEquation}} ~ .low
        constraints.assert({{baseAssertion}}, priority: .low)
    }

    func {{baseFunctionName}}WithPriorityLiteral() {
        let constraints = {{baseEquation}} ~ 300
        constraints.assert({{baseAssertion}}, priority: 300)
    }

    func {{baseFunctionName}}WithPriorityArithmetic() {
        let constraints = {{baseEquation}} ~ .high - 1
        constraints.assert({{baseAssertion}}, priority: 749)
    }

    // MARK: {{operatorName|upperFirstLetter}} with constant + multiplier

    func {{baseFunctionName}}PlusConstantMultiplyingConstant() {
        let constraints = {{baseLhs}} {{operator}} ({{baseRhs}} + {{constant}}) * {{multiplier}}
        constraints.assert({{baseAssertion}}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}PlusConstantMultipliedByConstant() {
        let constraints = {{baseLhs}} {{operator}} {{multiplier}} * ({{baseRhs}} + {{constant}})
        constraints.assert({{baseAssertion}}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}MultipliedByConstantPlusConstant() {
        let constraints = {{baseLhs}} {{operator}} {{multiplier}} * {{baseRhs}} + {{constant}}
        constraints.assert({{baseAssertion}}, constant: {{constant}}, multiplier: {{multiplier}})
    }
/*
    func {{baseFunctionName}}PlusConstantDividedByConstant() {
        let constraints = {{baseLhs}} {{operator}} ({{baseRhs}} + {{constant}}) / {{divisor}}
        constraints.assert({{baseAssertion}}, constant: {{constant}}, multiplier: 1 / {{divisor}})
    }
*/
{% endfor %}
{% endfor %}
{% endfor %}
// sourcery:end
{% endfor %}
