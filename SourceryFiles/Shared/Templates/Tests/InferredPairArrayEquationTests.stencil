{% set addition argument.arithmeticOperators.addition %}
{% set subtraction argument.arithmeticOperators.subtraction %}
{% set multiplication argument.arithmeticOperators.multiplication %}
{% set division argument.arithmeticOperators.division %}

{% set constant 10 %}
{% set multiplier 3 %}
{% set divisor 2 %}

{% for type in types.all|annotated:"inferredPairArrayEquationTest" %}
// sourcery:inline:auto:{{type.name}}.InferredPairAnchorEquationTest
{% for lhsItem in type.annotations.lhsItems %}
{% for rhsAttribute in type.annotations.rhsAttributes %}
// MARK: {{lhsItem}}{{rhsAttribute|upperFirstLetter}} <=> relatedView{{rhsAttribute|upperFirstLetter}}
{% for operatorName in argument.operators %}
{% set operator %}{{argument.operators[operatorName]}}{% endset %}
{% set baseFunctionName %}testInferred{{lhsItem|upperFirstLetter}}{{rhsAttribute|upperFirstLetter}}{{operatorName|upperFirstLetter}}To{{rhsAttribute|upperFirstLetter}}{% endset %}
{% set baseRhs %}relatedView.{{rhsAttribute}}{% endset %}
{% set baseEquation %}{{lhsItem}} {{operator}} {{baseRhs}}{% endset %}
{% macro baseAssertion rhs %}{{lhsItem}}, .{{rhs}}, .{{operatorName}}, relatedView, .{{rhs}}{% endmacro %}
{% set secondConstantDeclaration %}let secondConstant = ConstraintAttribute.{{type.annotations[rhsAttribute][1]}}.isCategory(.trailing) ? -{{constant}} : {{constant}}{% endset %}
    // MARK: {{operatorName|upperFirstLetter}}
    func {{baseFunctionName}}() {
        let constraints = {{baseEquation}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %})
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %})
    }

    // MARK: {{operatorName|upperFirstLetter}} with constant
    func {{baseFunctionName}}PlusConstant() {
        let constraints = {{baseEquation}} {{addition}} {{constant}}
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: {{constant}})
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: secondConstant)
    }

    func {{baseFunctionName}}MinusConstant() {
        let constraints = {{baseEquation}} {{subtraction}} {{constant}}
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: -{{constant}})
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: -secondConstant)
    }

    // MARK: {{operatorName|upperFirstLetter}} with multiplier
    func {{baseFunctionName}}MultiplyingConstant() {
        let constraints = {{baseEquation}} {{multiplication}} {{multiplier}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, multiplier: {{multiplier}})
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}MultipliedByConstant() {
        let constraints = {{lhsItem}} {{operator}} {{multiplier}} {{multiplication}} {{baseRhs}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, multiplier: {{multiplier}})
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}DividedByConstant() {
        let constraints = {{baseEquation}} {{division}} {{divisor}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, multiplier: 1 / {{divisor}})
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, multiplier: 1 / {{divisor}})
    }

    // MARK: {{operatorName|upperFirstLetter}} prioritized
    func {{baseFunctionName}}WithPriority() {
        let constraints = {{baseEquation}} ~ .low
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, priority: .low)
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, priority: .low)
    }

    func {{baseFunctionName}}WithPriorityLiteral() {
        let constraints = {{baseEquation}} ~ 300
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, priority: 300)
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, priority: 300)
    }

    func {{baseFunctionName}}WithPriorityArithmetic() {
        let constraints = {{baseEquation}} ~ .high {{subtraction}} 1
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, priority: 749)
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, priority: 749)
    }

    // MARK: {{operatorName|upperFirstLetter}} with constant {{addition}} multiplier

    func {{baseFunctionName}}PlusConstantMultiplyingConstant() {
        let constraints = {{lhsItem}} {{operator}} ({{baseRhs}} {{addition}} {{constant}}) {{multiplication}} {{multiplier}}
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}})
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: secondConstant * {{multiplier}}, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}PlusConstantMultipliedByConstant() {
        let constraints = {{lhsItem}} {{operator}} {{multiplier}} {{multiplication}} ({{baseRhs}} {{addition}} {{constant}})
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}})
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: secondConstant * {{multiplier}}, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}MultipliedByConstantPlusConstant() {
        let constraints = {{lhsItem}} {{operator}} {{multiplier}} {{multiplication}} {{baseRhs}} {{addition}} {{constant}}
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: {{constant}}, multiplier: {{multiplier}})
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: secondConstant, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}PlusConstantDividedByConstant() {
        let constraints = {{lhsItem}} {{operator}} ({{baseRhs}} {{addition}} {{constant}}) {{division}} {{divisor}}
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: {{constant}} / {{divisor}}, multiplier: 1 / {{divisor}})
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: secondConstant / {{divisor}}, multiplier: 1 / {{divisor}})
    }

    // MARK: {{operatorName|upperFirstLetter}} with constant {{addition}} multiplier and priority

    func {{baseFunctionName}}PlusConstantMultiplyingConstantWithPriority() {
        let constraints = {{lhsItem}} {{operator}} ({{baseRhs}} {{addition}} {{constant}}) {{multiplication}} {{multiplier}} ~ .low
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}}, priority: .low)
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: secondConstant * {{multiplier}}, multiplier: {{multiplier}}, priority: .low)
    }

    func {{baseFunctionName}}PlusConstantMultipliedByConstantWithPriority() {
        let constraints = {{lhsItem}} {{operator}} {{multiplier}} {{multiplication}} ({{baseRhs}} {{addition}} {{constant}}) ~ .low
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}}, priority: .low)
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: secondConstant * {{multiplier}}, multiplier: {{multiplier}}, priority: .low)
    }

    func {{baseFunctionName}}MultipliedByConstantPlusConstantWithPriority() {
        let constraints = {{lhsItem}} {{operator}} {{multiplier}} {{multiplication}} {{baseRhs}} {{addition}} {{constant}} ~ .low
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: {{constant}}, multiplier: {{multiplier}}, priority: .low)
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: secondConstant, multiplier: {{multiplier}}, priority: .low)
    }

    func {{baseFunctionName}}PlusConstantDividedByConstantWithPriority() {
        let constraints = {{lhsItem}} {{operator}} ({{baseRhs}} {{addition}} {{constant}}) {{division}} {{divisor}} ~ .low
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: {{constant}} / {{divisor}}, multiplier: 1 / {{divisor}}, priority: .low)
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: secondConstant / {{divisor}}, multiplier: 1 / {{divisor}}, priority: .low)
    }

    // MARK: {{operatorName|upperFirstLetter}} with constant {{addition}} multiplier and priority arithmetic

    func {{baseFunctionName}}PlusConstantMultiplyingConstantWithPriorityArithmetic() {
        let constraints = {{lhsItem}} {{operator}} ({{baseRhs}} {{addition}} {{constant}}) {{multiplication}} {{multiplier}}  ~ .high {{subtraction}} 1
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}}, priority: 749)
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: secondConstant * {{multiplier}}, multiplier: {{multiplier}}, priority: 749)
    }

    func {{baseFunctionName}}PlusConstantMultipliedByConstantWithPriorityArithmetic() {
        let constraints = {{lhsItem}} {{operator}} {{multiplier}} {{multiplication}} ({{baseRhs}} {{addition}} {{constant}})  ~ .high {{subtraction}} 1
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}}, priority: 749)
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: secondConstant * {{multiplier}}, multiplier: {{multiplier}}, priority: 749)
    }

    func {{baseFunctionName}}MultipliedByConstantPlusConstantWithPriorityArithmetic() {
        let constraints = {{lhsItem}} {{operator}} {{multiplier}} {{multiplication}} {{baseRhs}} {{addition}} {{constant}}  ~ .high {{subtraction}} 1
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: {{constant}}, multiplier: {{multiplier}}, priority: 749)
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: secondConstant, multiplier: {{multiplier}}, priority: 749)
    }

    func {{baseFunctionName}}PlusConstantDividedByConstantWithPriorityArithmetic() {
        let constraints = {{lhsItem}} {{operator}} ({{baseRhs}} {{addition}} {{constant}}) {{division}} {{divisor}}  ~ .high {{subtraction}} 1
        {{secondConstantDeclaration}}
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][0] %}, constant: {{constant}} / {{divisor}}, multiplier: 1 / {{divisor}}, priority: 749)
        constraints.assert({% call baseAssertion type.annotations[rhsAttribute][1] %}, constant: secondConstant / {{divisor}}, multiplier: 1 / {{divisor}}, priority: 749)
    }
{% endfor %}
{% endfor %}
{% endfor %}
// sourcery:end
{% endfor %}

