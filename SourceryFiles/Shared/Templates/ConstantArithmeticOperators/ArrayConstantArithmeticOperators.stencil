{% for AnchorType in argument.AnchorTypes %}
// sourcery:file:ArrayConstantArithmeticOperators/{{AnchorType}}+ArrayConstantArithmeticOperators
//
//  {{AnchorType}}+ArrayConstantArithmeticOperators.swift
//  UILayoutKit
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

@discardableResult
public func + (lhs: {{AnchorType}}s, rhs: LayoutConstant) -> {{AnchorType}}Expressions {
    return lhs.plus(rhs)
}

@discardableResult
public func - (lhs: {{AnchorType}}s, rhs: LayoutConstant) -> {{AnchorType}}Expressions {
    return lhs.minus(rhs)
}

@discardableResult
public func * (lhs: {{AnchorType}}s, rhs: LayoutMultiplier) -> {{AnchorType}}Expressions {
    return lhs.times(rhs)
}

@discardableResult
public func * (lhs: LayoutMultiplier, rhs: {{AnchorType}}s ) -> {{AnchorType}}Expressions {
    return rhs.times(lhs)
}

@discardableResult
public func / (lhs: {{AnchorType}}s, rhs: LayoutDivisor) -> {{AnchorType}}Expressions {
    return lhs.divided(by: rhs)
}

// MARK: Expressions

@discardableResult
public func + (lhs: {{AnchorType}}Expressions, rhs: LayoutConstant) -> {{AnchorType}}Expressions {
    return lhs.map { $0.with(constant: rhs) }
}

@discardableResult
public func - (lhs: {{AnchorType}}Expressions, rhs: LayoutConstant) -> {{AnchorType}}Expressions {
    return lhs.map { $0.with(constant: -rhs) }
}

@discardableResult
public func * (lhs: {{AnchorType}}Expressions, rhs: LayoutMultiplier) -> {{AnchorType}}Expressions {
    return lhs.map { $0.with(multiplier: rhs) }
}

@discardableResult
public func * (lhs: LayoutMultiplier, rhs: {{AnchorType}}Expressions ) -> {{AnchorType}}Expressions {
    return rhs * lhs
}

@discardableResult
public func / (lhs: {{AnchorType}}Expressions, rhs: LayoutDivisor) -> {{AnchorType}}Expressions {
    return lhs * (1.0 / rhs)
}

// sourcery:end
{% endfor %}


