
{% set equal argument.operators.equal %}
{% set type type.AspectRatioTests %}
// sourcery:inline:auto:{{ type.name }}.AspectRatioTestsTemplate

func testAmbiguityCheckValidSize() {
        view1.sizeAnchors {{equal}} 200
        XCTAssertFalse(view1.hasAmbiguousSize)

        view2.edgeAnchors {{equal}} parentView.edgeAnchors
        XCTAssertFalse(view2.hasAmbiguousSize)
    }

    func testAmbiguityCheckInvalidHeight() {
        view1.widthAnchor {{equal}} 200
        XCTAssertFalse(view1.hasAmbiguousWidth)
        XCTAssert(view1.hasAmbiguousHeight)
        XCTAssert(view1.hasAmbiguousSize)

        view2.horizontalEdges {{equal}} parentView.horizontalEdges
        XCTAssertFalse(view2.hasAmbiguousWidth)
        XCTAssert(view2.hasAmbiguousHeight)
        XCTAssert(view2.hasAmbiguousSize)
    }

    func testAmbiguityCheckInvalidWidth() {
        view1.heightAnchor {{equal}} 200
        XCTAssert(view1.hasAmbiguousWidth)
        XCTAssertFalse(view1.hasAmbiguousHeight)
        XCTAssert(view1.hasAmbiguousSize)

        view2.verticalEdges {{equal}} parentView.verticalEdges
        XCTAssert(view2.hasAmbiguousWidth)
        XCTAssertFalse(view2.hasAmbiguousHeight)
        XCTAssert(view2.hasAmbiguousSize)
    }

    func testAspectRatioPrecondition() {
        let caughtWidthPreconditionError = catchBadInstruction { [weak self] in
            guard let self = self else { return }
            self.view1.aspectRatioAnchor {{equal}} .wide
        }

        XCTAssertNotNil(caughtWidthPreconditionError)

        let caughtHeightPreconditionError = catchBadInstruction { [weak self] in
            guard let self = self else { return }
            self.view1.aspectRatioInverseAnchor {{equal}} .wide
        }

        XCTAssertNotNil(caughtHeightPreconditionError)
    }

    func testAspectRatio() {
        view1.widthAnchor {{equal}} 160
        let aspectRatioConstraint = view1.aspectRatioAnchor {{equal}} .wide
        aspectRatioConstraint.assert(view1, .height, .equal, view1, .width, multiplier: 16.0/9.0)
    }

    func testInverseAspectRatio() {
        view1.heightAnchor {{equal}} 90
        let aspectRatioConstraint = view1.aspectRatioInverseAnchor {{equal}} .wide
        aspectRatioConstraint.assert(view1, .width, .equal, view1, .height, multiplier: 9.0/16.0)
    }
// sourcery:end
