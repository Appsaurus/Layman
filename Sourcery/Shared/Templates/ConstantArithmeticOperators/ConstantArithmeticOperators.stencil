{% set equal argument.operators.equal %}
{% set lessThanOrEqual argument.operators.lessThanOrEqual %}
{% set greaterThanOrEqual argument.operators.greaterThanOrEqual %}
{% set addition argument.arithmeticOperators.addition %}
{% set subtraction argument.arithmeticOperators.subtraction %}
{% set multiplication argument.arithmeticOperators.multiplication %}
{% set division argument.arithmeticOperators.division %}

{% for AnchorType in argument.anchorTypes %}
//  sourcery:file:Sources/Shared/ConstantArithmeticOperators/{{AnchorType}}+ConstantArithmeticOperators
//
//  {{AnchorType}}ConstantArithmeticOperators.swift
//  UILayoutKit
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

@discardableResult
public func {{addition}} (lhs: {{AnchorType}}, rhs: LayoutConstant) -> {{AnchorType}}Expression {
    return lhs.plus(rhs)
}

@discardableResult
public func {{subtraction}} (lhs: {{AnchorType}}, rhs: LayoutConstant) -> {{AnchorType}}Expression {
    return lhs.minus(rhs)
}

@discardableResult
public func {{multiplication}} (lhs: {{AnchorType}}, rhs: LayoutConstant) -> {{AnchorType}}Expression {
    return lhs.times(rhs)
}

@discardableResult
public func {{multiplication}} (lhs: LayoutConstant, rhs: {{AnchorType}} ) -> {{AnchorType}}Expression {
    return rhs.times(lhs)
}

@discardableResult
public func {{multiplication}} (lhs: {{AnchorType}}, rhs: LayoutMultiplier) -> {{AnchorType}}Expression {
    return lhs.times(rhs)
}

@discardableResult
public func {{multiplication}} (lhs: LayoutMultiplier, rhs: {{AnchorType}} ) -> {{AnchorType}}Expression {
    return rhs.times(lhs)
}

@discardableResult
public func {{division}} (lhs: {{AnchorType}}, rhs: LayoutDivisor) -> {{AnchorType}}Expression {
    return lhs.divided(by: rhs)
}

// MARK: Expressions

@discardableResult
public func {{addition}} (lhs: {{AnchorType}}Expression, rhs: LayoutConstant) -> {{AnchorType}}Expression {
    return lhs.with(constant: rhs)
}

@discardableResult
public func {{subtraction}} (lhs: {{AnchorType}}Expression, rhs: LayoutConstant) -> {{AnchorType}}Expression {
    return lhs.with(constant: -rhs)
}

@discardableResult
public func {{multiplication}} (lhs: {{AnchorType}}Expression, rhs: LayoutConstant) -> {{AnchorType}}Expression {
    return lhs.with(multiplier: rhs)
}

@discardableResult
public func {{multiplication}} (lhs: LayoutConstant, rhs: {{AnchorType}}Expression ) -> {{AnchorType}}Expression {
    return rhs.with(multiplier: lhs)
}

@discardableResult
public func {{multiplication}} (lhs: {{AnchorType}}Expression, rhs: LayoutMultiplier) -> {{AnchorType}}Expression {
    return lhs.with(multiplier: rhs)
}

@discardableResult
public func {{multiplication}} (lhs: LayoutMultiplier, rhs: {{AnchorType}}Expression ) -> {{AnchorType}}Expression {
    return rhs.with(multiplier: lhs)
}

@discardableResult
public func {{division}} (lhs: {{AnchorType}}Expression, rhs: LayoutDivisor) -> {{AnchorType}}Expression {
    return lhs.with(divisor: rhs)
}
// sourcery:end
{% endfor %}

