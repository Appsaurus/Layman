{% set equal argument.operators.equal %}
{% set lessThanOrEqual argument.operators.lessThanOrEqual %}
{% set greaterThanOrEqual argument.operators.greaterThanOrEqual %}
{% set addition argument.arithmeticOperators.addition %}
{% set subtraction argument.arithmeticOperators.subtraction %}
{% set multiplication argument.arithmeticOperators.multiplication %}
{% set division argument.arithmeticOperators.division %}

{% for AnchorPairType in argument.anchorPairTypes %}
//  sourcery:file:Sources/Shared/ConstantArithmeticOperators/Pair/{{AnchorPairType}}+ConstantArithmeticOperators
//
//  {{AnchorPairType}}+ConstantArithmeticOperators.swift
//  UILayoutKit
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

@discardableResult
public func {{addition}} (lhs: {{AnchorPairType}}, rhs: LayoutConstant) -> {{AnchorPairType}}Expression {
    return {{AnchorPairType}}Expression(variable: lhs, coefficients: .constant(rhs))
}

@discardableResult
public func {{subtraction}} (lhs: {{AnchorPairType}}, rhs: LayoutConstant) -> {{AnchorPairType}}Expression {
    return {{AnchorPairType}}Expression(variable: lhs, coefficients: .constant(-rhs))
}

@discardableResult
public func {{multiplication}} (lhs: {{AnchorPairType}}, rhs: LayoutConstant) -> {{AnchorPairType}}Expression {
    return {{AnchorPairType}}Expression(variable: lhs, coefficients: .multiplier(rhs))
}

@discardableResult
public func {{multiplication}} (lhs: LayoutConstant, rhs: {{AnchorPairType}}) -> {{AnchorPairType}}Expression {
    return rhs.times(lhs)
}

@discardableResult
public func {{multiplication}} (lhs: {{AnchorPairType}}, rhs: LayoutMultiplier) -> {{AnchorPairType}}Expression {
    return {{AnchorPairType}}Expression(variable: lhs, coefficients: .multiplier(rhs))
}

@discardableResult
public func {{multiplication}} (lhs: LayoutMultiplier, rhs: {{AnchorPairType}}) -> {{AnchorPairType}}Expression {
    return rhs.times(lhs)
}

@discardableResult
public func {{division}} (lhs: {{AnchorPairType}}, rhs: LayoutDivisor) -> {{AnchorPairType}}Expression {
    return lhs {{multiplication}} (1.0 / rhs)
}

// MARK: Expressions

@discardableResult
public func {{addition}} (lhs: {{AnchorPairType}}Expression, rhs: LayoutConstant) -> {{AnchorPairType}}Expression {
    return lhs.with(constant: rhs)
}

@discardableResult
public func {{subtraction}} (lhs: {{AnchorPairType}}Expression, rhs: LayoutConstant) -> {{AnchorPairType}}Expression {
    return lhs.with(constant: -rhs)
}

@discardableResult
public func {{multiplication}} (lhs: {{AnchorPairType}}Expression, rhs: LayoutConstant) -> {{AnchorPairType}}Expression {
    return lhs.with(multiplier: rhs)
}

@discardableResult
public func {{multiplication}} (lhs: LayoutConstant, rhs: {{AnchorPairType}}Expression) -> {{AnchorPairType}}Expression {
    return rhs.with(multiplier: lhs)
}

@discardableResult
public func {{multiplication}} (lhs: {{AnchorPairType}}Expression, rhs: LayoutMultiplier) -> {{AnchorPairType}}Expression {
    return lhs.with(multiplier: rhs)
}

@discardableResult
public func {{multiplication}} (lhs: LayoutMultiplier, rhs: {{AnchorPairType}}Expression) -> {{AnchorPairType}}Expression {
    return rhs.with(multiplier: lhs)
}

@discardableResult
public func {{division}} (lhs: {{AnchorPairType}}Expression, rhs: LayoutDivisor) -> {{AnchorPairType}}Expression {
    return lhs.with(multiplier: (1.0 / rhs))
}

// sourcery:end
{% endfor %}
