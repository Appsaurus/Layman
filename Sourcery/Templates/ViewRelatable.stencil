{% for AnchorType in argument.anchorTypes %}
//  sourcery:file:Sources/Core/ViewRelatable/{{AnchorType}}+ViewRelatable
//
//  {{AnchorType}}+ViewRelatable.swift
//  Layman
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

extension {{AnchorType}} {
    {% set Solution %}{{AnchorType}}Equation.Solution{% endset %}

    public func relation(_ relation: LayoutRelation, _ rhs: View) -> {{AnchorType}}Equation {
        return {{AnchorType}}Equation(self, relation, rhs)
    }

    @discardableResult
    public func equal(to rhs: View) -> {{Solution}} {
        return relation(.equal, rhs).solution
    }
    @discardableResult
    public func equal(to rhs: [View]) -> [{{Solution}}] {
        return rhs.map { equal(to: $0) }
    }
    @discardableResult
    public func lessThanOrEqual(to rhs: View) -> {{Solution}} {
        return relation(.lessThanOrEqual, rhs).solution
    }
    @discardableResult
    public func lessThanOrEqual(to rhs: [View]) -> [{{Solution}}] {
        return rhs.map { lessThanOrEqual(to: $0) }
    }

    @discardableResult
    public func greaterThanOrEqual(to rhs: View) -> {{Solution}} {
        return relation(.greaterThanOrEqual, rhs).solution
    }
    @discardableResult
    public func greaterThanOrEqual(to rhs: [View]) -> [{{Solution}}] {
        return rhs.map { greaterThanOrEqual(to: $0) }
    }
    @discardableResult
    public func insetOrEqual(to rhs: View) -> {{Solution}} {
        return relation(.insetOrEqual, rhs).solution
    }
    @discardableResult
    public func insetOrEqual(to rhs: [View]) -> [{{Solution}}] {
        return rhs.map { insetOrEqual(to: $0) }
    }
    @discardableResult
    public func outsetOrEqual(to rhs: View) -> {{Solution}} {
        return relation(.outsetOrEqual, rhs).solution
    }
    @discardableResult
    public func outsetOrEqual(to rhs: [View]) -> [{{Solution}}] {
        return rhs.map { outsetOrEqual(to: $0) }
    }
}
// sourcery:end
{% endfor %}



