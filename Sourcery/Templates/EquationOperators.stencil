{% set equal argument.operators.equal %}
{% set lessThanOrEqual argument.operators.lessThanOrEqual %}
{% set greaterThanOrEqual argument.operators.greaterThanOrEqual %}
{% set addition argument.arithmeticOperators.addition %}
{% set subtraction argument.arithmeticOperators.subtraction %}
{% set multiplication argument.arithmeticOperators.multiplication %}
{% set division argument.arithmeticOperators.division %}
{% set insetOrEqual %}{{greaterThanOrEqual}}{{lessThanOrEqual}}{% endset %}
{% set outsetOrEqual %}{{lessThanOrEqual}}{{greaterThanOrEqual}}{% endset %}

{% for EquationProtocol in argument.equationProtocols %}
{% set EquationProtocolDefinition argument.equationProtocols[EquationProtocol] %}
{% set RelationshipType EquationProtocolDefinition["RelationshipType"] %}
{% set LeftHandTypeArray EquationProtocolDefinition["LeftHandTypes"] %}
{% for LeftHandTypeGroup in LeftHandTypeArray %}
{% for LeftHandType in argument[LeftHandTypeGroup] %}
//  sourcery:file:Sources/Operators/EquationProtocols/{{EquationProtocol}}/Operators/{{LeftHandType}}+{{EquationProtocol}}
//
//  Layman
//
//  Created by Brian Strobach on 1/22/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//
{% for RightHandType in argument.equationProtocols[EquationProtocol]["RightHandTypes"] %}
// MARK: {{LeftHandType}} <=> {{RightHandType}}

// MARK: - Equal

@discardableResult
public func {{equal}} (lhs: {{LeftHandType}}, rhs: {{RightHandType}}) -> {{LeftHandType}}.Solution {
    return lhs.equal(to: rhs)
}

// MARK: - LessThanOrEqual

@discardableResult
public func {{lessThanOrEqual}} (lhs: {{LeftHandType}}, rhs: {{RightHandType}}) -> {{LeftHandType}}.Solution {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: - GreaterThanOrEqual

@discardableResult
public func {{greaterThanOrEqual}} (lhs: {{LeftHandType}}, rhs: {{RightHandType}}) -> {{LeftHandType}}.Solution {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: - InsetOrEqual
@discardableResult
public func {{insetOrEqual}} (lhs: {{LeftHandType}}, rhs: {{RightHandType}}) -> {{LeftHandType}}.Solution {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: - OutsetOrEqual
@discardableResult
public func {{outsetOrEqual}} (lhs: {{LeftHandType}}, rhs: {{RightHandType}}) -> {{LeftHandType}}.Solution {
    return lhs.outsetOrEqual(to: rhs)
}

// MARK: {{LeftHandType}} Array <=> {{RightHandType}}

// MARK: - Equal

// MARK: Collection == Expression
@discardableResult
public func {{equal}} (lhs: [{{LeftHandType}}], rhs: {{RightHandType}}) -> [{{LeftHandType}}.Solution] {
    return lhs.equal(to: rhs)
}

// MARK: - LessThanOrEqual

// MARK: Collection <= Expression
@discardableResult
public func {{lessThanOrEqual}} (lhs: [{{LeftHandType}}], rhs: {{RightHandType}}) -> [{{LeftHandType}}.Solution] {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: - GreaterThanOrEqual

// MARK: Collection >= Expression
@discardableResult
public func {{greaterThanOrEqual}} (lhs: [{{LeftHandType}}], rhs: {{RightHandType}}) -> [{{LeftHandType}}.Solution] {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: - InsetOrEqual
@discardableResult
public func {{insetOrEqual}} (lhs: [{{LeftHandType}}], rhs: {{RightHandType}}) -> [{{LeftHandType}}.Solution] {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: - OutsetOrEqual
@discardableResult
public func {{outsetOrEqual}} (lhs: [{{LeftHandType}}], rhs: {{RightHandType}}) -> [{{LeftHandType}}.Solution] {
    return lhs.outsetOrEqual(to: rhs)
}
{% endfor %}
// sourcery:end
{% endfor %}
{% endfor %}
{% endfor %}
