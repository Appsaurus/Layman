
{% set equal argument.operators.equal %}
{% set lessThanOrEqual argument.operators.lessThanOrEqual %}
{% set greaterThanOrEqual argument.operators.greaterThanOrEqual %}
{% set addition argument.arithmeticOperators.addition %}
{% set subtraction argument.arithmeticOperators.subtraction %}
{% set multiplication argument.arithmeticOperators.multiplication %}
{% set division argument.arithmeticOperators.division %}
{% set insetOrEqual %}{{greaterThanOrEqual}}{{lessThanOrEqual}}{% endset %}
{% set outsetOrEqual %}{{lessThanOrEqual}}{{greaterThanOrEqual}}{% endset %}

{% for anchorTypeGroup in argument.allVariableTypes %}
{% for AnchorType in argument[anchorTypeGroup] %}
{% set AnchorTypeExpression %}{{AnchorType}}Expression{% endset %}
{% set Solution %}{{AnchorType}}.Solution{% endset %}
{% set SolutionArray %}[{{Solution}}]{% endset %}
{% set AnchorTypeArray %}[{{AnchorType}}]{% endset %}
{% set AnchorTypeExpressionArray %}[{{AnchorTypeExpression}}]{% endset %}
//  sourcery:file:Sources/Operators/InferredAnchorRelatable/View+{{AnchorType}}RelationOperators
//
//  View+{{AnchorType}}RelationOperators.swift
//  Layman
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

// MARK: View attribute inferred from Anchor

// MARK: View == Anchor
@discardableResult
public func {{equal}} (lhs: View, rhs: {{AnchorType}}) -> {{Solution}} {
    return lhs.equal(to: rhs)
}

// MARK: View <= Anchor
@discardableResult
public func {{lessThanOrEqual}} (lhs: View, rhs: {{AnchorType}}) -> {{Solution}} {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: View >= Anchor
@discardableResult
public func {{greaterThanOrEqual}} (lhs: View, rhs: {{AnchorType}}) -> {{Solution}} {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: View >=< Anchor
@discardableResult
public func {{insetOrEqual}} (lhs: View, rhs: {{AnchorType}}) -> {{Solution}} {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: View <=> Anchor
@discardableResult
public func {{outsetOrEqual}} (lhs: View, rhs: {{AnchorType}}) -> {{Solution}} {
    return lhs.outsetOrEqual(to: rhs)
}

// MARK: View attribute inferred from Anchor collection

// MARK: View == [Anchor]
@discardableResult
public func {{equal}} (lhs: View, rhs: {{AnchorTypeArray}}) -> {{SolutionArray}} {
    return lhs.equal(to: rhs)
}

// MARK: View <= [Anchor]
@discardableResult
public func {{lessThanOrEqual}} (lhs: View, rhs: {{AnchorTypeArray}}) -> {{SolutionArray}} {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: View >= [Anchor]
@discardableResult
public func {{greaterThanOrEqual}} (lhs: View, rhs: {{AnchorTypeArray}}) -> {{SolutionArray}} {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: View >=< [Anchor]
@discardableResult
public func {{insetOrEqual}} (lhs: View, rhs: {{AnchorTypeArray}}) -> {{SolutionArray}} {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: View <=> [Anchor]
@discardableResult
public func {{outsetOrEqual}} (lhs: View, rhs: {{AnchorTypeArray}}) -> {{SolutionArray}} {
    return lhs.outsetOrEqual(to: rhs)
}

// MARK: View array attributes inferred from Anchor

// MARK: [View] == Anchor
@discardableResult
public func {{equal}} (lhs: [View], rhs: {{AnchorType}}) -> {{SolutionArray}} {
    return lhs.equal(to: rhs)
}

// MARK: [View] <= Anchor
@discardableResult
public func {{lessThanOrEqual}} (lhs: [View], rhs: {{AnchorType}}) -> {{SolutionArray}} {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: [View] >= Anchor
@discardableResult
public func {{greaterThanOrEqual}} (lhs: [View], rhs: {{AnchorType}}) -> {{SolutionArray}} {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: [View] >=< Anchor
@discardableResult
public func {{insetOrEqual}} (lhs: [View], rhs: {{AnchorType}}) -> {{SolutionArray}} {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: [View] <=> Anchor
@discardableResult
public func {{outsetOrEqual}} (lhs: [View], rhs: {{AnchorType}}) -> {{SolutionArray}} {
    return lhs.outsetOrEqual(to: rhs)
}

// MARK: View array attributes inferred from Anchor collection

// MARK: [View] == [Anchor]
@discardableResult
public func {{equal}} (lhs: [View], rhs: {{AnchorTypeArray}}) -> [{{SolutionArray}}] {
    return lhs.equal(to: rhs)
}

// MARK: [View] <= [Anchor]
@discardableResult
public func {{lessThanOrEqual}} (lhs: [View], rhs: {{AnchorTypeArray}}) -> [{{SolutionArray}}] {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: [View] >= [Anchor]
@discardableResult
public func {{greaterThanOrEqual}} (lhs: [View], rhs: {{AnchorTypeArray}}) -> [{{SolutionArray}}] {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: [View] >=< [Anchor]
@discardableResult
public func {{insetOrEqual}} (lhs: [View], rhs: {{AnchorTypeArray}}) -> [{{SolutionArray}}] {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: [View] <=> [Anchor]
@discardableResult
public func {{outsetOrEqual}} (lhs: [View], rhs: {{AnchorTypeArray}}) -> [{{SolutionArray}}] {
    return lhs.outsetOrEqual(to: rhs)
}

{% if AnchorType != 'View' %}
// MARK: Anchor == View
@discardableResult
public func {{equal}} (lhs: {{AnchorType}}, rhs: View) -> {{Solution}} {
    return lhs.equal(to: rhs)
}

// MARK: View <= Anchor
@discardableResult
public func {{lessThanOrEqual}} (lhs: {{AnchorType}}, rhs: View) -> {{Solution}} {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: View >= Anchor
@discardableResult
public func {{greaterThanOrEqual}} (lhs: {{AnchorType}}, rhs: View) -> {{Solution}} {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: View >=< Anchor
@discardableResult
public func {{insetOrEqual}} (lhs: {{AnchorType}}, rhs: View) -> {{Solution}} {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: View <=> Anchor
@discardableResult
public func {{outsetOrEqual}} (lhs: {{AnchorType}}, rhs: View) -> {{Solution}} {
    return lhs.outsetOrEqual(to: rhs)
}

// MARK: View attribute inferred from Anchor collection

// MARK: View == [Anchor]
@discardableResult
public func {{equal}} (lhs: {{AnchorTypeArray}}, rhs: View) -> {{SolutionArray}} {
    return lhs.equal(to: rhs)
}

// MARK: View <= [Anchor]
@discardableResult
public func {{lessThanOrEqual}} (lhs: {{AnchorTypeArray}}, rhs: View) -> {{SolutionArray}} {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: View >= [Anchor]
@discardableResult
public func {{greaterThanOrEqual}} (lhs: {{AnchorTypeArray}}, rhs: View) -> {{SolutionArray}} {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: View >=< [Anchor]
@discardableResult
public func {{insetOrEqual}} (lhs: {{AnchorTypeArray}}, rhs: View) -> {{SolutionArray}} {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: View <=> [Anchor]
@discardableResult
public func {{outsetOrEqual}} (lhs: {{AnchorTypeArray}}, rhs: View) -> {{SolutionArray}} {
    return lhs.outsetOrEqual(to: rhs)
}

// MARK: View array attributes inferred from Anchor

// MARK: [View] == Anchor
@discardableResult
public func {{equal}} (lhs: {{AnchorType}}, rhs: [View]) -> {{SolutionArray}} {
    return lhs.equal(to: rhs)
}

// MARK: [View] <= Anchor
@discardableResult
public func {{lessThanOrEqual}} (lhs: {{AnchorType}}, rhs: [View]) -> {{SolutionArray}} {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: [View] >= Anchor
@discardableResult
public func {{greaterThanOrEqual}} (lhs: {{AnchorType}}, rhs: [View]) -> {{SolutionArray}} {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: [View] >=< Anchor
@discardableResult
public func {{insetOrEqual}} (lhs: {{AnchorType}}, rhs: [View]) -> {{SolutionArray}} {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: [View] <=> Anchor
@discardableResult
public func {{outsetOrEqual}} (lhs: {{AnchorType}}, rhs: [View]) -> {{SolutionArray}} {
    return lhs.outsetOrEqual(to: rhs)
}

// MARK: View array attributes inferred from Anchor collection

// MARK: [View] == [Anchor]
@discardableResult
public func {{equal}} (lhs: {{AnchorTypeArray}}, rhs: [View]) -> [{{SolutionArray}}] {
    return lhs.equal(to: rhs)
}

// MARK: [View] <= [Anchor]
@discardableResult
public func {{lessThanOrEqual}} (lhs: {{AnchorTypeArray}}, rhs: [View]) -> [{{SolutionArray}}] {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: [View] >= [Anchor]
@discardableResult
public func {{greaterThanOrEqual}} (lhs: {{AnchorTypeArray}}, rhs: [View]) -> [{{SolutionArray}}] {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: [View] >=< [Anchor]
@discardableResult
public func {{insetOrEqual}} (lhs: {{AnchorTypeArray}}, rhs: [View]) -> [{{SolutionArray}}] {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: [View] <=> [Anchor]
@discardableResult
public func {{outsetOrEqual}} (lhs: {{AnchorTypeArray}}, rhs: [View]) -> [{{SolutionArray}}] {
    return lhs.outsetOrEqual(to: rhs)
}

// MARK: View attribute inferred from expression

// MARK: View == Expression
@discardableResult
public func {{equal}} (lhs: View, rhs: {{AnchorTypeExpression}}) -> {{Solution}} {
    return lhs.equal(to: rhs)
}

// MARK: View <= Expression
@discardableResult
public func {{lessThanOrEqual}} (lhs: View, rhs: {{AnchorTypeExpression}}) -> {{Solution}} {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: View >= Expression
@discardableResult
public func {{greaterThanOrEqual}} (lhs: View, rhs: {{AnchorTypeExpression}}) -> {{Solution}} {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: View >=< Expression
@discardableResult
public func {{insetOrEqual}} (lhs: View, rhs: {{AnchorTypeExpression}}) -> {{Solution}} {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: View <=> Expression
@discardableResult
public func {{outsetOrEqual}} (lhs: View, rhs: {{AnchorTypeExpression}}) -> {{Solution}} {
    return lhs.outsetOrEqual(to: rhs)
}

// MARK: View attribute inferred from expression collection

// MARK: View == Expressions
@discardableResult
public func {{equal}} (lhs: View, rhs: {{AnchorTypeExpressionArray}}) -> {{SolutionArray}} {
    return lhs.equal(to: rhs)
}

// MARK: View <= Expressions
@discardableResult
public func {{lessThanOrEqual}} (lhs: View, rhs: {{AnchorTypeExpressionArray}}) -> {{SolutionArray}} {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: View >= Expressions
@discardableResult
public func {{greaterThanOrEqual}} (lhs: View, rhs: {{AnchorTypeExpressionArray}}) -> {{SolutionArray}} {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: View >=< Expression
@discardableResult
public func {{insetOrEqual}} (lhs: View, rhs: {{AnchorTypeExpressionArray}}) -> {{SolutionArray}} {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: View <=> Expression
@discardableResult
public func {{outsetOrEqual}} (lhs: View, rhs: {{AnchorTypeExpressionArray}}) -> {{SolutionArray}} {
    return lhs.outsetOrEqual(to: rhs)
}

// MARK: View array attributes inferred from Expression

// MARK: [View] == Expression
@discardableResult
public func {{equal}} (lhs: [View], rhs: {{AnchorTypeExpression}}) -> {{SolutionArray}} {
    return lhs.equal(to: rhs)
}

// MARK: [View] <= Expression
@discardableResult
public func {{lessThanOrEqual}} (lhs: [View], rhs: {{AnchorTypeExpression}}) -> {{SolutionArray}} {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: [View] >= Expression
@discardableResult
public func {{greaterThanOrEqual}} (lhs: [View], rhs: {{AnchorTypeExpression}}) -> {{SolutionArray}} {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: [View] >=< Expression
@discardableResult
public func {{insetOrEqual}} (lhs: [View], rhs: {{AnchorTypeExpression}}) -> {{SolutionArray}} {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: [View] <=> Expression
@discardableResult
public func {{outsetOrEqual}} (lhs: [View], rhs: {{AnchorTypeExpression}}) -> {{SolutionArray}} {
    return lhs.outsetOrEqual(to: rhs)
}

// MARK: View array attributes inferred from expression collection

// MARK: [View] == [Expression]
@discardableResult
public func {{equal}} (lhs: [View], rhs: {{AnchorTypeExpressionArray}}) -> [{{SolutionArray}}] {
    return lhs.equal(to: rhs)
}

// MARK: [View] <= [Expression]
@discardableResult
public func {{lessThanOrEqual}} (lhs: [View], rhs: {{AnchorTypeExpressionArray}}) -> [{{SolutionArray}}] {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: [View] >= [Expression]
@discardableResult
public func {{greaterThanOrEqual}} (lhs: [View], rhs: {{AnchorTypeExpressionArray}}) -> [{{SolutionArray}}] {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: [View] >=< [Expression]
@discardableResult
public func {{insetOrEqual}} (lhs: [View], rhs: {{AnchorTypeExpressionArray}}) -> [{{SolutionArray}}] {
    return lhs.insetOrEqual(to: rhs)
}

// MARK: [View] <=> [Expression]
@discardableResult
public func {{outsetOrEqual}} (lhs: [View], rhs: {{AnchorTypeExpressionArray}}) -> [{{SolutionArray}}] {
    return lhs.outsetOrEqual(to: rhs)
}
{% endif %}

// sourcery:end
{% endfor %}
{% endfor %}
