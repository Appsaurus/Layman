{% for EquationProtocol in argument.equationProtocols %}
{% set RelationshipType %}{{argument.equationProtocols[EquationProtocol]["RelationshipType"]}}{% endset %}
//  sourcery:file:Sources/Core/EquationProtocols/{{EquationProtocol}}/{{EquationProtocol}}
//
//  Layman
//
//  Created by Brian Strobach on 1/22/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

public protocol {{EquationProtocol}}: LinearEquationTyped {
{% for RightHandType in argument.equationProtocols[EquationProtocol]["RightHandTypes"] %}
    func relation(_ relation: LayoutRelation, _ rhs: {{RightHandType}}) -> LinearEquation
{% endfor %}
}
{% for RightHandType in argument.equationProtocols[EquationProtocol]["RightHandTypes"]  %}
// MARK: Anchor <=> {{RightHandType}}
extension {{EquationProtocol}} {

    // MARK: - Equal

    @discardableResult
    public func equal(to rhs: {{RightHandType}}) -> Solution {
        return relation(.equal, rhs).solution
    }

    // MARK: - LessThanOrEqual

    @discardableResult
    public func lessThanOrEqual(to rhs: {{RightHandType}}) -> Solution {
        return relation(.lessThanOrEqual, rhs).solution
    }

    // MARK: - GreaterThanOrEqual

    @discardableResult
    public func greaterThanOrEqual(to rhs: {{RightHandType}}) -> Solution {
        return relation(.greaterThanOrEqual, rhs).solution
    }

}

// MARK: Collection <=> {{RightHandType}}
extension Collection where Element: {{EquationProtocol}} {
    // MARK: - Equal
    // MARK: Collection == Expression
    @discardableResult
    public func equal(to rhs: {{RightHandType}}) -> [Element.Solution] {
        return map { $0.equal(to: rhs) }
    }

    // MARK: - LessThanOrEqual

    // MARK: Collection <= Expression
    @discardableResult
    public func lessThanOrEqual(to rhs: {{RightHandType}}) -> [Element.Solution] {
        return map { $0.lessThanOrEqual(to: rhs) }
    }

    // MARK: - GreaterThanOrEqual

    // MARK: Collection >= Expression
    @discardableResult
    public func greaterThanOrEqual(to rhs: {{RightHandType}}) -> [Element.Solution] {
        return map { $0.greaterThanOrEqual(to: rhs) }
    }
}
{% endfor %}
// sourcery:end
{% endfor %}
