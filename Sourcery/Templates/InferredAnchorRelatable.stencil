{% for anchorTypeGroup in argument.allAnchorTypes %}
{% for AnchorType in argument[anchorTypeGroup] %}
//  sourcery:file:Sources/Core/InferredAnchorRelatable/View+{{AnchorType}}Relatable
//
//  View+{{AnchorType}}Relatable.swift
//  Layman
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

{% set Solution %}{{AnchorType}}Equation.Solution{% endset %}
extension View {
    public func relation(_ relation: LayoutRelation, _ rhs: {{AnchorType}}) -> {{AnchorType}}Equation {
        return {{AnchorType}}Equation(self, relation, rhs)
    }

    @discardableResult
    public func equal(to rhs: {{AnchorType}}) -> {{Solution}} {
        return relation(.equal, rhs).solution
    }
    @discardableResult
    public func equal(to rhs: [{{AnchorType}}]) -> [{{Solution}}] {
        return rhs.map { equal(to: $0) }
    }
    @discardableResult
    public func lessThanOrEqual(to rhs: {{AnchorType}}) -> {{Solution}} {
        return relation(.lessThanOrEqual, rhs).solution
    }
    @discardableResult
    public func lessThanOrEqual(to rhs: [{{AnchorType}}]) -> [{{Solution}}] {
        return rhs.map { lessThanOrEqual(to: $0) }
    }

    @discardableResult
    public func greaterThanOrEqual(to rhs: {{AnchorType}}) -> {{Solution}} {
        return relation(.greaterThanOrEqual, rhs).solution
    }
    @discardableResult
    public func greaterThanOrEqual(to rhs: [{{AnchorType}}]) -> [{{Solution}}] {
        return rhs.map { greaterThanOrEqual(to: $0) }
    }
    @discardableResult
    public func insetOrEqual(to rhs: {{AnchorType}}) -> {{Solution}} {
        return relation(.insetOrEqual, rhs).solution
    }
    @discardableResult
    public func insetOrEqual(to rhs: [{{AnchorType}}]) -> [{{Solution}}] {
        return rhs.map { insetOrEqual(to: $0) }
    }
    @discardableResult
    public func outsetOrEqual(to rhs: {{AnchorType}}) -> {{Solution}} {
        return relation(.outsetOrEqual, rhs).solution
    }
    @discardableResult
    public func outsetOrEqual(to rhs: [{{AnchorType}}]) -> [{{Solution}}] {
        return rhs.map { outsetOrEqual(to: $0) }
    }
}

extension Collection where Element: View {
    @discardableResult
    public func equal(to rhs: {{AnchorType}}) -> [{{Solution}}] {
        return map { $0.equal(to: rhs) }
    }

    @discardableResult
    public func equal(to rhs: [{{AnchorType}}]) -> [[{{Solution}}]] {
        return map { $0.equal(to: rhs) }
    }

    // MARK: - LessThanOrEqual
    @discardableResult
    public func lessThanOrEqual(to rhs: {{AnchorType}}) -> [{{Solution}}] {
        return map { $0.lessThanOrEqual(to: rhs) }
    }

    @discardableResult
    public func lessThanOrEqual(to rhs: [{{AnchorType}}]) -> [[{{Solution}}]] {
        return map { $0.lessThanOrEqual(to: rhs) }
    }

    // MARK: - GreaterThanOrEqual

    @discardableResult
    public func greaterThanOrEqual(to rhs: {{AnchorType}}) -> [{{Solution}}] {
        return map { $0.greaterThanOrEqual(to: rhs) }
    }

    @discardableResult
    public func greaterThanOrEqual(to rhs: [{{AnchorType}}]) -> [[{{Solution}}]] {
        return map { $0.greaterThanOrEqual(to: rhs) }
    }

    // MARK: - InsetFrom
    @discardableResult
    public func insetOrEqual(to rhs: {{AnchorType}}) -> [{{Solution}}] {
        return map { $0.insetOrEqual(to: rhs) }
    }

    @discardableResult
    public func insetOrEqual(to rhs: [{{AnchorType}}]) -> [[{{Solution}}]] {
        return map { $0.insetOrEqual(to: rhs) }
    }

    // MARK: - OutsetFrom

    @discardableResult
    public func outsetOrEqual(to rhs: {{AnchorType}}) -> [{{Solution}}] {
        return map { $0.outsetOrEqual(to: rhs) }
    }

    @discardableResult
    public func outsetOrEqual(to rhs: [{{AnchorType}}]) -> [[{{Solution}}]] {
        return map { $0.outsetOrEqual(to: rhs) }
    }
}

{% set Expression %}{{AnchorType}}Equation.Expression{% endset %}
extension View {
    public func relation(_ relation: LayoutRelation, _ rhs: {{AnchorType}}Equation.Expression) -> {{AnchorType}}Equation {
        return {{AnchorType}}Equation(self, relation, rhs)
    }

    @discardableResult
    public func equal(to rhs: {{Expression}}) -> {{Solution}} {
        return relation(.equal, rhs).solution
    }
    @discardableResult
    public func equal(to rhs: [{{Expression}}]) -> [{{Solution}}] {
        return rhs.map { equal(to: $0) }
    }
    @discardableResult
    public func lessThanOrEqual(to rhs: {{Expression}}) -> {{Solution}} {
        return relation(.lessThanOrEqual, rhs).solution
    }
    @discardableResult
    public func lessThanOrEqual(to rhs: [{{Expression}}]) -> [{{Solution}}] {
        return rhs.map { lessThanOrEqual(to: $0) }
    }

    @discardableResult
    public func greaterThanOrEqual(to rhs: {{Expression}}) -> {{Solution}} {
        return relation(.greaterThanOrEqual, rhs).solution
    }
    @discardableResult
    public func greaterThanOrEqual(to rhs: [{{Expression}}]) -> [{{Solution}}] {
        return rhs.map { greaterThanOrEqual(to: $0) }
    }
    @discardableResult
    public func insetOrEqual(to rhs: {{Expression}}) -> {{Solution}} {
        return relation(.insetOrEqual, rhs).solution
    }
    @discardableResult
    public func insetOrEqual(to rhs: [{{Expression}}]) -> [{{Solution}}] {
        return rhs.map { insetOrEqual(to: $0) }
    }
    @discardableResult
    public func outsetOrEqual(to rhs: {{Expression}}) -> {{Solution}} {
        return relation(.outsetOrEqual, rhs).solution
    }
    @discardableResult
    public func outsetOrEqual(to rhs: [{{Expression}}]) -> [{{Solution}}] {
        return rhs.map { outsetOrEqual(to: $0) }
    }
}

extension Collection where Element: View {
    @discardableResult
    public func equal(to rhs: {{Expression}}) -> [{{Solution}}] {
        return map { $0.equal(to: rhs) }
    }

    @discardableResult
    public func equal(to rhs: [{{Expression}}]) -> [[{{Solution}}]] {
        return map { $0.equal(to: rhs) }
    }

    // MARK: - LessThanOrEqual
    @discardableResult
    public func lessThanOrEqual(to rhs: {{Expression}}) -> [{{Solution}}] {
        return map { $0.lessThanOrEqual(to: rhs) }
    }

    @discardableResult
    public func lessThanOrEqual(to rhs: [{{Expression}}]) -> [[{{Solution}}]] {
        return map { $0.lessThanOrEqual(to: rhs) }
    }

    // MARK: - GreaterThanOrEqual

    @discardableResult
    public func greaterThanOrEqual(to rhs: {{Expression}}) -> [{{Solution}}] {
        return map { $0.greaterThanOrEqual(to: rhs) }
    }

    @discardableResult
    public func greaterThanOrEqual(to rhs: [{{Expression}}]) -> [[{{Solution}}]] {
        return map { $0.greaterThanOrEqual(to: rhs) }
    }

    // MARK: - InsetFrom
    @discardableResult
    public func insetOrEqual(to rhs: {{Expression}}) -> [{{Solution}}] {
        return map { $0.insetOrEqual(to: rhs) }
    }

    @discardableResult
    public func insetOrEqual(to rhs: [{{Expression}}]) -> [[{{Solution}}]] {
        return map { $0.insetOrEqual(to: rhs) }
    }

    // MARK: - OutsetFrom

    @discardableResult
    public func outsetOrEqual(to rhs: {{Expression}}) -> [{{Solution}}] {
        return map { $0.outsetOrEqual(to: rhs) }
    }

    @discardableResult
    public func outsetOrEqual(to rhs: [{{Expression}}]) -> [[{{Solution}}]] {
        return map { $0.outsetOrEqual(to: rhs) }
    }
}
// sourcery:end
{% endfor %}
{% endfor %}


