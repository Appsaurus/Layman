{% set addition argument.arithmeticOperators.addition %}
{% set subtraction argument.arithmeticOperators.subtraction %}
{% set multiplication argument.arithmeticOperators.multiplication %}
{% set division argument.arithmeticOperators.division %}

{% set constant 10 %}
{% set multiplier 3 %}
{% set divisor 2 %}


{% macro generateTests lhs lhsItem lhsAttribute rhsItem rhsAttribute functionNamePrefix %}
    // MARK: {{lhs}}{{lhsAttribute|upperFirstLetter}} <=> {{rhsItem}}{{rhsAttribute|upperFirstLetter}}
{% for operatorName in argument.operators %}
{% set operator %}{{argument.operators[operatorName]}}{% endset %}
{% set baseFunctionName %}test{{functionNamePrefix}}{{lhsItem|upperFirstLetter}}{{lhsAttribute|upperFirstLetter}}{{operatorName|upperFirstLetter}}To{{rhsItem}}{{rhsAttribute|upperFirstLetter}}{% endset %}
{% set baseRhs %}{{rhsItem}}.{{rhsAttribute}}{% endset %}
{% set baseEquation %}{{lhs}} {{operator}} {{baseRhs}}{% endset %}
{% set baseAssertion %}{{lhsItem}}, .{{lhsAttribute}}, .{{operatorName}}, {{rhsItem}}, .{{rhsAttribute}}{% endset %}
    // MARK: {{operatorName|upperFirstLetter}}

    func {{baseFunctionName}}() {
        let constraints = {{baseEquation}}
        constraints.assert({{baseAssertion}})
    }

{% if lhsAttribute == rhsAttribute %}
    func {{baseFunctionName}}InversedInference() {
        let constraints = {{lhsItem}}.{{rhsAttribute}} {{operator}} {{rhsItem}}
        constraints.assert({{baseAssertion}})
    }
{% endif %}
    // MARK: {{operatorName|upperFirstLetter}} with constant
    func {{baseFunctionName}}PlusConstant() {
        let constraints = {{baseEquation}} {{addition}} {{constant}}
        constraints.assert({{baseAssertion}}, constant: {{constant}})
    }

    func {{baseFunctionName}}MinusConstant() {
        let constraints = {{baseEquation}} {{subtraction}} {{constant}}
        constraints.assert({{baseAssertion}}, constant: -{{constant}})
    }

    // MARK: {{operatorName|upperFirstLetter}} with multiplier
    func {{baseFunctionName}}MultiplyingConstant() {
        let constraints = {{baseEquation}} {{multiplication}} {{multiplier}}
        constraints.assert({{baseAssertion}}, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}MultipliedByConstant() {
        let constraints = {{lhs}} {{operator}} {{multiplier}} {{multiplication}} {{baseRhs}}
        constraints.assert({{baseAssertion}}, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}DividedByConstant() {
        let constraints = {{baseEquation}} {{division}} {{divisor}}
        constraints.assert({{baseAssertion}}, multiplier: 1 / {{divisor}})
    }

    // MARK: {{operatorName|upperFirstLetter}} prioritized
    func {{baseFunctionName}}WithPriority() {
        let constraints = {{baseEquation}} ~ .low
        constraints.assert({{baseAssertion}}, priority: .low)
    }

    func {{baseFunctionName}}WithPriorityLiteral() {
        let constraints = {{baseEquation}} ~ 300
        constraints.assert({{baseAssertion}}, priority: 300)
    }

    func {{baseFunctionName}}WithPriorityArithmetic() {
        let constraints = {{baseEquation}} ~ .high {{subtraction}} 1
        constraints.assert({{baseAssertion}}, priority: 749)
    }

    // MARK: {{operatorName|upperFirstLetter}} with constant {{addition}} multiplier

    func {{baseFunctionName}}PlusConstantMultiplyingConstant() {
        let constraints = {{lhs}} {{operator}} ({{baseRhs}} {{addition}} {{constant}}) {{multiplication}} {{multiplier}}
        constraints.assert({{baseAssertion}}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}PlusConstantMultipliedByConstant() {
        let constraints = {{lhs}} {{operator}} {{multiplier}} {{multiplication}} ({{baseRhs}} {{addition}} {{constant}})
        constraints.assert({{baseAssertion}}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}MultipliedByConstantPlusConstant() {
        let constraints = {{lhs}} {{operator}} {{multiplier}} {{multiplication}} {{baseRhs}} {{addition}} {{constant}}
        constraints.assert({{baseAssertion}}, constant: {{constant}}, multiplier: {{multiplier}})
    }

    func {{baseFunctionName}}PlusConstantDividedByConstant() {
        let constraints = {{lhs}} {{operator}} ({{baseRhs}} {{addition}} {{constant}}) {{division}} {{divisor}}
        constraints.assert({{baseAssertion}}, constant: {{constant}} / {{divisor}}, multiplier: 1 / {{divisor}})
    }

    // MARK: {{operatorName|upperFirstLetter}} with constant {{addition}} multiplier and priority

    func {{baseFunctionName}}PlusConstantMultiplyingConstantWithPriority() {
        let constraints = {{lhs}} {{operator}} ({{baseRhs}} {{addition}} {{constant}}) {{multiplication}} {{multiplier}} ~ .low
        constraints.assert({{baseAssertion}}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}}, priority: .low)
    }

    func {{baseFunctionName}}PlusConstantMultipliedByConstantWithPriority() {
        let constraints = {{lhs}} {{operator}} {{multiplier}} {{multiplication}} ({{baseRhs}} {{addition}} {{constant}}) ~ .low
        constraints.assert({{baseAssertion}}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}}, priority: .low)
    }

    func {{baseFunctionName}}MultipliedByConstantPlusConstantWithPriority() {
        let constraints = {{lhs}} {{operator}} {{multiplier}} {{multiplication}} {{baseRhs}} {{addition}} {{constant}} ~ .low
        constraints.assert({{baseAssertion}}, constant: {{constant}}, multiplier: {{multiplier}}, priority: .low)
    }

    func {{baseFunctionName}}PlusConstantDividedByConstantWithPriority() {
        let constraints = {{lhs}} {{operator}} ({{baseRhs}} {{addition}} {{constant}}) {{division}} {{divisor}} ~ .low
        constraints.assert({{baseAssertion}}, constant: {{constant}} / {{divisor}}, multiplier: 1 / {{divisor}}, priority: .low)
    }

    // MARK: {{operatorName|upperFirstLetter}} with constant {{addition}} multiplier and priority arithmetic

    func {{baseFunctionName}}PlusConstantMultiplyingConstantWithPriorityArithmetic() {
        let constraints = {{lhs}} {{operator}} ({{baseRhs}} {{addition}} {{constant}}) {{multiplication}} {{multiplier}} ~ .high {{subtraction}} 1
        constraints.assert({{baseAssertion}}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}}, priority: 749)
    }

    func {{baseFunctionName}}PlusConstantMultipliedByConstantWithPriorityArithmetic() {
        let constraints = {{lhs}} {{operator}} {{multiplier}} {{multiplication}} ({{baseRhs}} {{addition}} {{constant}}) ~ .high {{subtraction}} 1
        constraints.assert({{baseAssertion}}, constant: {{constant}} * {{multiplier}}, multiplier: {{multiplier}}, priority: 749)
    }

    func {{baseFunctionName}}MultipliedByConstantPlusConstantWithPriorityArithmetic() {
        let constraints = {{lhs}} {{operator}} {{multiplier}} {{multiplication}} {{baseRhs}} {{addition}} {{constant}} ~ .high {{subtraction}} 1
        constraints.assert({{baseAssertion}}, constant: {{constant}}, multiplier: {{multiplier}}, priority: 749)
    }

    func {{baseFunctionName}}PlusConstantDividedByConstantWithPriorityArithmetic() {
        let constraints = {{lhs}} {{operator}} ({{baseRhs}} {{addition}} {{constant}}) {{division}} {{divisor}} ~ .high {{subtraction}} 1
        constraints.assert({{baseAssertion}}, constant: {{constant}} / {{divisor}}, multiplier: 1 / {{divisor}}, priority: 749)
    }
{% endfor %}
{% endmacro %}
{% for type in types.all|annotated:"anchorEquationTest" %}
// sourcery:inline:auto:{{type.name}}.EquationTests
{% set lhsItem type.annotations.lhsItem %}
{% for lhsAttribute in type.annotations.lhsAttributes %}
{% for rhsAttribute in type.annotations.rhsAttributes %}
{% set explicitLhs %}{{lhsItem}}.{{lhsAttribute}}{% endset %}
{% call generateTests explicitLhs lhsItem lhsAttribute "relatedView" rhsAttribute "" %}
{% call generateTests explicitLhs lhsItem lhsAttribute "relatedViewArray" rhsAttribute "" %}
{% endfor %}
{% endfor %}
// sourcery:end
{% endfor %}

{% set type type.InferredAnchorEquationTests %}
// sourcery:inline:auto:{{type.name}}.InferredAnchorEquationTests
{% for lhsItem in type.annotations.lhsItems %}
{% for rhsAttribute in type.annotations.rhsAttributes %}
{% call generateTests lhsItem lhsItem rhsAttribute "relatedView" rhsAttribute "Inferred" %}
{% call generateTests lhsItem lhsItem rhsAttribute "relatedViewArray" rhsAttribute "Inferred" %}
{% endfor %}
{% endfor %}
// sourcery:end
