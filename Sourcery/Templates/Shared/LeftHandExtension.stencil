{% for AnchorType in argument.anchorTypes %}
//  sourcery:file:Sources/Shared/LeftHandLayoutExpression/{{AnchorType}}+LeftHandLayoutExpression
//
//  {{AnchorType}}+LeftHandLayoutExpression.swift
//  Layman
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

extension {{AnchorType}}: LeftHandLayoutExpression, CoefficientEquatable {
    public typealias LinearEquation = {{AnchorType}}Equation

    public func relation(_ relation: LayoutRelation, _ rhs: {{AnchorType}}) -> LinearEquation {
        return LinearEquation(self, relation, rhs)
    }

    public func relation(_ relation: LayoutRelation, _ rhs: RightHandExpression) -> LinearEquation {
        return LinearEquation(self, relation, rhs)
    }

    public func relation(_ relation: LayoutRelation, _ rhs: LayoutConstant) -> LinearEquation {
        return LinearEquation(self, relation, rhs)
    }

    public func relation(_ relation: LayoutRelation, _ rhs: LayoutMultiplier) -> LinearEquation {
        return LinearEquation(self, relation, .multiplier(rhs))
    }

    public func relation(_ relation: LayoutRelation, _ rhs: LayoutCoefficient) -> LinearEquation {
        return LinearEquation(self, relation, rhs)
    }

    public func relation(_ relation: LayoutRelation, _ rhs: RelativeLayoutConstant) -> LinearEquation {
        return LinearEquation(self, relation, rhs)
    }
}

{% set Solution %}{{AnchorType}}Equation.Solution{% endset %}
extension View {
    public func relation(_ relation: LayoutRelation, _ rhs: {{AnchorType}}) -> {{AnchorType}}Equation {
        return {{AnchorType}}Equation(self, relation, rhs)
    }

    @discardableResult
    public func equal(to rhs: {{AnchorType}}) -> {{Solution}} {
        return relation(.equal, rhs).solution
    }
    @discardableResult
    public func equal(to rhs: [{{AnchorType}}]) -> [{{Solution}}] {
        return rhs.map { relation(.equal, $0).solution }
    }
    @discardableResult
    public func lessThanOrEqual(to rhs: {{AnchorType}}) -> {{Solution}} {
        return relation(.lessThanOrEqual, rhs).solution
    }
    @discardableResult
    public func lessThanOrEqual(to rhs: [{{AnchorType}}]) -> [{{Solution}}] {
        return rhs.map { relation(.lessThanOrEqual, $0).solution }
    }

    @discardableResult
    public func greaterThanOrEqual(to rhs: {{AnchorType}}) -> {{Solution}} {
        return relation(.greaterThanOrEqual, rhs).solution
    }
    @discardableResult
    public func greaterThanOrEqual(to rhs: [{{AnchorType}}]) -> [{{Solution}}] {
        return rhs.map { relation(.greaterThanOrEqual, $0).solution }
    }
    @discardableResult
    public func inset(from rhs: {{AnchorType}}) -> {{Solution}} {
        return relation(.insetFrom, rhs).solution
    }
    @discardableResult
    public func inset(from rhs: [{{AnchorType}}]) -> [{{Solution}}] {
        return rhs.map { relation(.insetFrom, $0).solution }
    }
    @discardableResult
    public func outset(from rhs: {{AnchorType}}) -> {{Solution}} {
        return relation(.outsetFrom, rhs).solution
    }
    @discardableResult
    public func outset(from rhs: [{{AnchorType}}]) -> [{{Solution}}] {
        return rhs.map { relation(.outsetFrom, $0).solution }
    }
}

{% set Expression %}{{AnchorType}}Equation.Expression{% endset %}
extension View {
    public func relation(_ relation: LayoutRelation, _ rhs: {{AnchorType}}Equation.Expression) -> {{AnchorType}}Equation {
        return {{AnchorType}}Equation(self, relation, rhs)
    }

    @discardableResult
    public func equal(to rhs: {{Expression}}) -> {{Solution}} {
        return relation(.equal, rhs).solution
    }
    @discardableResult
    public func equal(to rhs: [{{Expression}}]) -> [{{Solution}}] {
        return rhs.map { relation(.equal, $0).solution }
    }
    @discardableResult
    public func lessThanOrEqual(to rhs: {{Expression}}) -> {{Solution}} {
        return relation(.lessThanOrEqual, rhs).solution
    }
    @discardableResult
    public func lessThanOrEqual(to rhs: [{{Expression}}]) -> [{{Solution}}] {
        return rhs.map { relation(.lessThanOrEqual, $0).solution }
    }

    @discardableResult
    public func greaterThanOrEqual(to rhs: {{Expression}}) -> {{Solution}} {
        return relation(.greaterThanOrEqual, rhs).solution
    }
    @discardableResult
    public func greaterThanOrEqual(to rhs: [{{Expression}}]) -> [{{Solution}}] {
        return rhs.map { relation(.greaterThanOrEqual, $0).solution }
    }
    @discardableResult
    public func inset(from rhs: {{Expression}}) -> {{Solution}} {
        return relation(.insetFrom, rhs).solution
    }
    @discardableResult
    public func inset(from rhs: [{{Expression}}]) -> [{{Solution}}] {
        return rhs.map { relation(.insetFrom, $0).solution }
    }
    @discardableResult
    public func outset(from rhs: {{Expression}}) -> {{Solution}} {
        return relation(.outsetFrom, rhs).solution
    }
    @discardableResult
    public func outset(from rhs: [{{Expression}}]) -> [{{Solution}}] {
        return rhs.map { relation(.outsetFrom, $0).solution }
    }
}

// sourcery:end
{% endfor %}


