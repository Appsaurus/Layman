{% set equal argument.operators.equal %}
{% set lessThanOrEqual argument.operators.lessThanOrEqual %}
{% set greaterThanOrEqual argument.operators.greaterThanOrEqual %}
{% set addition argument.arithmeticOperators.addition %}
{% set subtraction argument.arithmeticOperators.subtraction %}
{% set multiplication argument.arithmeticOperators.multiplication %}
{% set division argument.arithmeticOperators.division %}

{% for AnchorType in argument.anchorTypes %}
{% set Solution %}{{AnchorType}}.Solution{% endset %}
//  sourcery:file:Sources/Shared/ArrayRelationOperators/{{AnchorType}}+ArrayRelationOperators
//
//  {{AnchorType}}+ArrayRelationOperators.swift
//  Layman
//
//  Created by Brian Strobach on 1/4/19.
//  Copyright Â© 2019 Brian Strobach. All rights reserved.
//

// MARK: - Equal

// MARK: Anchor == Anchor Array
@discardableResult
public func {{equal}} (lhs: {{AnchorType}}, rhs: {{AnchorType}}s) -> [{{Solution}}] {
    return lhs.equal(to: rhs)
}

// MARK: Anchor Array == Anchor
@discardableResult
public func {{equal}} (lhs: {{AnchorType}}s, rhs: {{AnchorType}}) -> [{{Solution}}] {
    return lhs.equal(to: rhs)
}

// MARK: Anchor Array == Anchor Array
@discardableResult
public func {{equal}} (lhs: {{AnchorType}}s, rhs: {{AnchorType}}s) -> [[{{Solution}}]] {
    return lhs.equal(to: rhs)
}

// MARK: Anchor == Expression Array
@discardableResult
public func {{equal}} (lhs: {{AnchorType}}, rhs: {{AnchorType}}Expressions) -> [{{Solution}}] {
    return lhs.equal(to: rhs)
}

// MARK: Anchor Array == Expression
@discardableResult
public func {{equal}} (lhs: {{AnchorType}}s, rhs: {{AnchorType}}Expression) -> [{{Solution}}] {
    return lhs.equal(to: rhs)
}

// MARK: Anchor Array == Expression Array
@discardableResult
public func {{equal}} (lhs: {{AnchorType}}s, rhs: {{AnchorType}}Expressions) -> [[{{Solution}}]] {
    return lhs.equal(to: rhs)
}

// MARK: - LessThanOrEqual

// MARK: Anchor <= Anchor Array
@discardableResult
public func {{lessThanOrEqual}} (lhs: {{AnchorType}}, rhs: {{AnchorType}}s) -> [{{Solution}}] {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: Anchor Array <= Anchor
@discardableResult
public func {{lessThanOrEqual}} (lhs: {{AnchorType}}s, rhs: {{AnchorType}}) -> [{{Solution}}] {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: Anchor Array <= Anchor Array
@discardableResult
public func {{lessThanOrEqual}} (lhs: {{AnchorType}}s, rhs: {{AnchorType}}s) -> [[{{Solution}}]] {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: Anchor <= Expression Array
@discardableResult
public func {{lessThanOrEqual}} (lhs: {{AnchorType}}, rhs: {{AnchorType}}Expressions) -> [{{Solution}}] {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: Anchor Array <= Expression
@discardableResult
public func {{lessThanOrEqual}} (lhs: {{AnchorType}}s, rhs: {{AnchorType}}Expression) -> [{{Solution}}] {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: Anchor Array <= Expression Array
@discardableResult
public func {{lessThanOrEqual}} (lhs: {{AnchorType}}s, rhs: {{AnchorType}}Expressions) -> [[{{Solution}}]] {
    return lhs.lessThanOrEqual(to: rhs)
}

// MARK: - GreaterThanOrEqual

// MARK: Anchor >= Anchor Array
@discardableResult
public func {{greaterThanOrEqual}} (lhs: {{AnchorType}}, rhs: {{AnchorType}}s) -> [{{Solution}}] {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: Anchor Array >= Anchor
@discardableResult
public func {{greaterThanOrEqual}} (lhs: {{AnchorType}}s, rhs: {{AnchorType}}) -> [{{Solution}}] {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: Anchor Array >= Anchor Array
@discardableResult
public func {{greaterThanOrEqual}} (lhs: {{AnchorType}}s, rhs: {{AnchorType}}s) -> [[{{Solution}}]] {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: Anchor >= Expression Array
@discardableResult
public func {{greaterThanOrEqual}} (lhs: {{AnchorType}}, rhs: {{AnchorType}}Expressions) -> [{{Solution}}] {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: Anchor Array >= Expression
@discardableResult
public func {{greaterThanOrEqual}} (lhs: {{AnchorType}}s, rhs: {{AnchorType}}Expression) -> [{{Solution}}] {
    return lhs.greaterThanOrEqual(to: rhs)
}

// MARK: Anchor Array >= Expression Array
@discardableResult
public func {{greaterThanOrEqual}} (lhs: {{AnchorType}}s, rhs: {{AnchorType}}Expressions) -> [[{{Solution}}]] {
    return lhs.greaterThanOrEqual(to: rhs)
}
// sourcery:end
{% endfor %}
